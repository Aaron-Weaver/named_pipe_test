/**
 * NamedPipe
 *
 * NamedPipe instantiates a named pipe on Unix (using the Unix command "mkfifo")
 * So that two processes may communicate with each other.
 *
 * This class contains various methods that relate to sending and retrieving from pipes,
 * as well as managing that pipe (deleting, waiting, etc...).
 *
 * NOTE: This will only Work on operating systems running unix. Windows is not supported.
 *
 * The only dependencies necessary are those being imported below.
 *
 * @author Aaron Weaver         (waaronl@okstate.edu)
 * @version 1.0
 * @since 2014-09-30
 */

import java.io.*;
import java.util.ArrayList;

public class NamedPipe {

    private String pipeName;
    private Process pipe;

    /*
     * Creates pipe with "mkfifo" command and argument as the pipe's name.
     * @params pipeName
     *              - The name of the pipe
     */
    public NamedPipe(String pipeName) throws IOException {
        this.pipeName = pipeName;
        Runtime rt = Runtime.getRuntime();
        pipe = rt.exec(SearchFileUtils.MKFIFO_COMMAND + " " + this.pipeName);
    }

    /*
     * Sends any single String message through to the pipe and closes that
     * stream.
     * @params message
     *              - The message to be sent
     */
    public void sendThroughPipe(String message) throws IOException {
        OutputStream os = new FileOutputStream(this.pipeName);
        PrintStream printStream = new PrintStream(os);
        printStream.println(message);
        printStream.flush();
        printStream.close();
        os.flush();
        os.close();
    }

    /*
     * Sends an ArrayList of multiple different lines through to the pipe and closes
     * the stream.
     * @params lines
     *              - All of the lines to be sent through
     */
    public void sendMultipleLinesThroughPipe(ArrayList<String> lines) throws IOException {
        OutputStream os = new FileOutputStream(this.pipeName);
        PrintStream printStream = new PrintStream(os);
        for(int i = 0; i < lines.size(); i++)
        {
            printStream.println(lines.get(i));
        }
        printStream.flush();
        printStream.close();
        os.flush();
        os.close();
    }

    /*
     * Retrieves an ArrayList of multiple different Strings from the pipe name sent as an argument
     * @params pipe
     *              - The name of the pipe to retrieve data from
     * @returns ArrayList<String>
     */
    public ArrayList<String> retrieveMultipleLinesFromPipe(String pipe) throws IOException {
        Process process = Runtime.getRuntime().exec("cat > " + pipe);
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        ArrayList<String> lines = new ArrayList<String>();
        String line = reader.readLine();
        while(line != null) {
            lines.add(line);
            line = reader.readLine();
        }
        reader.close();
        return lines;
    }

    /*
     * Retrieves a single String from the pipe name sent as an argument
     * @params pipe
     *              - The name of the pipe to retrieve data from
     * @returns String
     */
    public String retrieveFromPipe(String pipe) throws IOException {
        Process process = Runtime.getRuntime().exec("cat > " + pipe);
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String message = reader.readLine();
        reader.close();
        return message;
    }

    /*
     * Calls the waitFor() method for Process class (@see Process)
     * @params VOID
     */
    public int waitFor() throws InterruptedException {
        return this.pipe.waitFor();
    }

    /*
     * Returns the process generated by the constructor
     * @params VOID
     * @returns Process
     */
    public Process getPipe() { return this.pipe; }

    /*
     * Removes the pipe from the OS by deleting it using the "rm" command for UNIX
     * @params VOID
     */
    public void destroyPipe() throws IOException {
        Runtime.getRuntime().exec("rm " + this.pipeName);
    }
}
